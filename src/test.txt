Oto kod index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="./css/styles.css" />
    <title>Homework 10</title>
  </head>
  <body>
    <div class="container">
      <div class="cat">
        <div class="ear ear--left"></div>
        <div class="ear ear--right"></div>
        <div class="face">
          <div class="eye eye--left">
            <div class="eye-pupil"></div>
          </div>
          <div class="eye eye--right">
            <div class="eye-pupil"></div>
          </div>
          <div class="muzzle"></div>
        </div>
      </div>
    </div>
    <div class="center-container">
      <select id="breed-select" class="breed-select"></select>
    </div>
    <p class="loader hidden">Loading data, please wait...</p>
    <p class="error hidden">
      Oops! Something went wrong! Try reloading the page!
    </p>
    <div class="cat-image-frame">
      <div id="cat-image-container"></div>
    </div>
    <div class="cat-info"></div>

    <script src="./js/index.js" type="module"></script>
  </body>
</html>

Oto kod index.js import '../css/cat-loader.css'; import { fetchBreeds,
fetchCatByBreed } from './cat-api.js'; const breedSelectElement =
document.getElementById('breed-select'); const catInfoElement =
document.querySelector('.cat-info'); const initializeCatApp = async () => {
const breeds = await fetchBreeds(); breeds.forEach(breed => { const option =
document.createElement('option'); option.value = breed.id; option.text =
breed.name; breedSelectElement.add(option); });
breedSelectElement.addEventListener('change', async event => { const breedId =
event.target.value; const catData = await fetchCatByBreed(breedId); const { url,
breeds: [breedInfo], } = catData; const catImageContainerElement =
document.getElementById( 'cat-image-container' );
catImageContainerElement.innerHTML = `<img
  src="${url}"
  alt="${breedInfo.name}"
  style="width: 100%; height: 100%; object-fit: cover"
/>`; catInfoElement.innerHTML = `
<h1>${breedInfo.name}</h1>
<p>${breedInfo.description}</p>
<p><strong>Temperament: </strong>${breedInfo.temperament}</p>
`; }); }; initializeCatApp(); oto kod cat-api.js import axios from 'axios';
import SlimSelect from 'slim-select'; import 'slim-select/dist/slimselect.css';
axios.defaults.headers.common['x-api-key'] =
'live_0E5x8jdCKMbi1c183G5nEN0dasXbtPsXcjYussnwbwZa4Ti1yZEPAkgeFAFlbGoC';
function showLoader() {
document.querySelector('.loader').classList.add('visible');
document.querySelector('.error').classList.remove('visible'); } function
hideLoader() { document.querySelector('.loader').classList.remove('visible'); }
function showError() {
document.querySelector('.error').classList.add('visible');
document.querySelector('.loader').classList.remove('visible'); } export async
function fetchBreeds() { const response = await
axios.get('https://api.thecatapi.com/v1/breeds'); return response.data; } export
async function fetchCatByBreed(breedId) { const response = await axios.get(
`https://api.thecatapi.com/v1/images/search?breed_ids=${breedId}` ); return
response.data[0]; } function populateBreedSelect(breeds) { const select =
document.querySelector('.breed-select'); select.innerHTML = breeds .map(breed =>
`
<option value="${breed.id}">${breed.name}</option>
`) .join(''); } function initializeSlimSelect() { new SlimSelect({ select:
'.breed-select', }); } function updateCatImage(catInfo) { const
catImageContainer = document.getElementById('cat-image-container'); const
imgElement = document.createElement('img'); imgElement.src = catInfo.url;
imgElement.alt = catInfo.breeds[0].name; imgElement.width = 600;
imgElement.height = 600; catImageContainer.innerHTML = '';
catImageContainer.appendChild(imgElement); } export async function
initializeCatApp() { showLoader(); const loadingPromise = new Promise(resolve =>
{ setTimeout(resolve, 1000); }); try { const breedsPromise = fetchBreeds();
await Promise.all([breedsPromise, loadingPromise]); const breeds = await
breedsPromise; populateBreedSelect(breeds); initializeSlimSelect(); } catch
(error) { showError(); console.error(error); } finally { hideLoader(); }
document .querySelector('.breed-select') .addEventListener('change', async event
=> { const breedId = event.target.value; showLoader(); try { const catInfo =
await fetchCatByBreed(breedId); populateCatInfo(catInfo); } catch (error) {
showError(); console.error(error); } finally { hideLoader(); } }); } function
populateCatInfo(catInfo) { updateCatImage(catInfo); // Dodane wywo≈Çanie funkcji
const catInfoDiv = document.querySelector('.cat-info'); catInfoDiv.innerHTML = `
<h2>${catInfo.breeds[0].name}</h2>
<p>${catInfo.breeds[0].description}</p>
<p><strong>Temperament: </strong>${catInfo.breeds[0].temperament}</p>
`; } oto kod styles.css .hidden { display: none; } .visible { display: block; }
.container { width: 350px; height: 350px; border-radius: 105px; overflow:
hidden; display: flex; align-items: center; justify-content: center;
background-color: var(--color-black); } oto kod cat-lodaer.css :root {
--color-black: #161616; --color-white: #fff; --size: 170px; /* Fully responsive
*/ } /* Cat */ .cat { position: relative; height: var(--size); width:
calc(var(--size) * 1.13); } /* Dodane style dla animacji fade-out */ @keyframes
fade-out { from { opacity: 1; } to { opacity: 0; } } /* Ears */ .ear { position:
absolute; top: -30%; height: 60%; width: 25%; background: var(--color-white); }
.ear::before, .ear::after { content: ''; position: absolute; bottom: 24%;
height: 10%; width: 5%; border-radius: 50%; background: var(--color-black); }
.ear::after { transform-origin: 50% 100%; } .ear--left { left: -7%;
border-radius: 70% 30% 0% 0% / 100% 100% 0% 0%; transform: rotate(-15deg); }
.ear--left::before, .ear--left::after { right: 10%; } .ear--left::after {
transform: rotate(-45deg); } .ear--right { right: -7%; border-radius: 30% 70% 0%
0% / 100% 100% 0% 0%; transform: rotate(15deg); } .ear--right::before,
.ear--right::after { left: 10%; } .ear--right::after { transform: rotate(45deg);
} /* Face */ .face { position: absolute; height: 100%; width: 100%; background:
var(--color-black); border-radius: 50%; } /* Eyes */ .eye { position: absolute;
top: 35%; height: 30%; width: 31%; background: var(--color-white);
border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%; } .eye::after { content: '';
position: absolute; top: 0; left: 0; height: 0; width: 100%; border-radius: 0 0
50% 50% / 0 0 40% 40%; background: var(--color-black); animation: blink 4s
infinite ease-in; } @keyframes blink { 0% { height: 0; } 90% { height: 0; }
92.5% { height: 100%; } 95% { height: 0; } 97.5% { height: 100%; } 100% {
height: 0; } } .eye::before { content: ''; position: absolute; top: 60%; height:
10%; width: 15%; background: var(--color-white); border-radius: 50%; }
.eye--left { left: 0; } .eye--left::before { right: -5%; } .eye--right { right:
0; } .eye--right::before { left: -5%; } /* Pupils */ .eye-pupil { position:
absolute; top: 25%; height: 50%; width: 20%; background: var(--color-black);
border-radius: 50%; animation: look-around 4s infinite; } @keyframes look-around
{ 0% { transform: translate(0); } 5% { transform: translate(50%, -25%); } 10% {
transform: translate(50%, -25%); } 15% { transform: translate(-100%, -25%); }
20% { transform: translate(-100%, -25%); } 25% { transform: translate(0, 0); }
100% { transform: translate(0, 0); } } .eye--left .eye-pupil { right: 30%; }
.eye--right .eye-pupil { left: 30%; } .eye-pupil::after { content: ''; position:
absolute; top: 30%; right: -5%; height: 20%; width: 35%; border-radius: 50%;
background: var(--color-white); } /* Muzzle */ .muzzle { position: absolute;
top: 60%; left: 50%; height: 6%; width: 10%; background: var(--color-white);
transform: translateX(-50%); border-radius: 50% 50% 50% 50% / 30% 30% 70% 70%; }
/* General page styling */ html { height: 100%; display: flex; align-items:
center; justify-content: center; } .center-container { display: flex;
justify-content: center; align-items: center; height: 100vh; width: 100%;
position: absolute; top: 120px; left: 0; } .breed-select { z-index: 1; }
.cat-image-frame { width: 600px; height: 600px; float: left; border-radius:
15px; overflow: hidden; border: 2px solid var(--color-black); }
#cat-image-container { width: 100%; height: 100%; background-size: cover;
background-position: center; }
